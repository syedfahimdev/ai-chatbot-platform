"""
Conversation and Message models for chat history and context management.

Generated on: 2024-12-19T10:30:00Z
Generated by syed
"""

from datetime import datetime, timezone
from enum import Enum
from sqlalchemy import Column, Integer, String, Text, DateTime, Boolean, ForeignKey, JSON
from sqlalchemy.orm import relationship

from app.core.database import Base


class MessageRole(str, Enum):
    """Message role enumeration."""
    USER = "user"
    ASSISTANT = "assistant"
    SYSTEM = "system"


class ConversationType(str, Enum):
    """Conversation type enumeration."""
    CUSTOMER_SUPPORT = "customer_support"
    FIELD_SERVICE = "field_service"


class Conversation(Base):
    """Conversation model for chat sessions."""
    
    __tablename__ = "conversations"
    
    id = Column(Integer, primary_key=True, index=True)
    title = Column(String(255), nullable=True)
    conversation_type = Column(String(50), default=ConversationType.CUSTOMER_SUPPORT, nullable=False)
    user_id = Column(Integer, ForeignKey("users.id"), nullable=False)
    
    # Context and metadata
    context = Column(JSON, nullable=True)  # Store conversation context
    meta_data = Column(JSON, nullable=True)  # Additional metadata
    
    # Audit fields
    created_at = Column(DateTime(timezone=True), default=lambda: datetime.now(timezone.utc), nullable=False)
    updated_at = Column(DateTime(timezone=True), default=lambda: datetime.now(timezone.utc), onupdate=lambda: datetime.now(timezone.utc), nullable=False)
    is_active = Column(Boolean, default=True, nullable=False)
    
    # Relationships
    user = relationship("User", back_populates="conversations")
    messages = relationship("Message", back_populates="conversation", cascade="all, delete-orphan")
    
    def __repr__(self):
        return f"<Conversation(id={self.id}, type='{self.conversation_type}', user_id={self.user_id})>"
    
    @property
    def message_count(self) -> int:
        """Get the number of messages in this conversation."""
        return len(self.messages)
    
    @property
    def last_message(self):
        """Get the last message in this conversation."""
        if self.messages:
            return max(self.messages, key=lambda m: m.created_at)
        return None


class Message(Base):
    """Message model for individual chat messages."""
    
    __tablename__ = "messages"
    
    id = Column(Integer, primary_key=True, index=True)
    conversation_id = Column(Integer, ForeignKey("conversations.id"), nullable=False)
    role = Column(String(20), default=MessageRole.USER, nullable=False)
    content = Column(Text, nullable=False)
    
    # AI-specific fields
    tokens_used = Column(Integer, nullable=True)
    model_used = Column(String(100), nullable=True)
    response_time = Column(Integer, nullable=True)  # in milliseconds
    
    # Source references for RAG responses
    sources = Column(JSON, nullable=True)  # List of source documents
    confidence_score = Column(Integer, nullable=True)  # 0-100
    
    # Metadata
    meta_data = Column(JSON, nullable=True)
    
    # Audit fields
    created_at = Column(DateTime(timezone=True), default=lambda: datetime.now(timezone.utc), nullable=False)
    
    # Relationships
    conversation = relationship("Conversation", back_populates="messages")
    
    def __repr__(self):
        return f"<Message(id={self.id}, role='{self.role}', conversation_id={self.conversation_id})>"
    
    @property
    def is_user_message(self) -> bool:
        """Check if message is from user."""
        return self.role == MessageRole.USER
    
    @property
    def is_assistant_message(self) -> bool:
        """Check if message is from assistant."""
        return self.role == MessageRole.ASSISTANT
    
    @property
    def is_system_message(self) -> bool:
        """Check if message is from system."""
        return self.role == MessageRole.SYSTEM
    
    @property
    def has_sources(self) -> bool:
        """Check if message has source references."""
        return self.sources is not None and len(self.sources) > 0 