"""
Feedback model for user feedback and analytics tracking.

Generated on: 2024-12-19T10:30:00Z
Generated by syed
"""

from datetime import datetime, timezone
from enum import Enum
from sqlalchemy import Column, Integer, String, Text, DateTime, Boolean, ForeignKey, JSON
from sqlalchemy.orm import relationship

from app.core.database import Base


class FeedbackType(str, Enum):
    """Feedback type enumeration."""
    RATING = "rating"
    COMMENT = "comment"
    BUG_REPORT = "bug_report"
    FEATURE_REQUEST = "feature_request"


class FeedbackRating(str, Enum):
    """Feedback rating enumeration."""
    VERY_POOR = "very_poor"
    POOR = "poor"
    NEUTRAL = "neutral"
    GOOD = "good"
    EXCELLENT = "excellent"


class Feedback(Base):
    """Feedback model for user feedback and analytics."""
    
    __tablename__ = "feedback"
    
    id = Column(Integer, primary_key=True, index=True)
    user_id = Column(Integer, ForeignKey("users.id"), nullable=False)
    conversation_id = Column(Integer, ForeignKey("conversations.id"), nullable=True)
    message_id = Column(Integer, ForeignKey("messages.id"), nullable=True)
    
    # Feedback content
    feedback_type = Column(String(50), default=FeedbackType.RATING, nullable=False)
    rating = Column(String(20), nullable=True)  # For rating feedback
    comment = Column(Text, nullable=True)
    
    # Context and metadata
    context = Column(JSON, nullable=True)  # Additional context
    meta_data = Column(JSON, nullable=True)  # Additional metadata
    
    # Audit fields
    created_at = Column(DateTime, default=lambda: datetime.now(timezone.utc), nullable=False)
    updated_at = Column(DateTime, default=lambda: datetime.now(timezone.utc), onupdate=lambda: datetime.now(timezone.utc), nullable=False)
    is_processed = Column(Boolean, default=False, nullable=False)
    processed_at = Column(DateTime, nullable=True)
    
    # Relationships
    user = relationship("User", back_populates="feedback")
    conversation = relationship("Conversation")
    message = relationship("Message")
    
    def __repr__(self):
        return f"<Feedback(id={self.id}, type='{self.feedback_type}', user_id={self.user_id})>"
    
    @property
    def has_rating(self) -> bool:
        """Check if feedback has a rating."""
        return self.rating is not None
    
    @property
    def has_comment(self) -> bool:
        """Check if feedback has a comment."""
        return self.comment is not None and self.comment.strip() != ""
    
    @property
    def is_positive_rating(self) -> bool:
        """Check if rating is positive (good or excellent)."""
        return self.rating in [FeedbackRating.GOOD, FeedbackRating.EXCELLENT]
    
    @property
    def is_negative_rating(self) -> bool:
        """Check if rating is negative (very_poor or poor)."""
        return self.rating in [FeedbackRating.VERY_POOR, FeedbackRating.POOR] 