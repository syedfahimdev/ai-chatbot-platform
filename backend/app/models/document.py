"""
Document model for knowledge base management.

Generated on: 2024-12-19T10:30:00Z
Generated by syed
"""

from datetime import datetime, timezone
from enum import Enum
from sqlalchemy import Column, Integer, String, Text, DateTime, Boolean, Enum as SQLEnum, ForeignKey
from sqlalchemy.orm import relationship

from app.core.database import Base


class DocumentAudience(str, Enum):
    """Document audience enumeration."""
    CUSTOMER = "customer"
    FIELD_ENGINEER = "field_engineer"
    BOTH = "both"


class DocumentStatus(str, Enum):
    """Document status enumeration."""
    DRAFT = "draft"
    PUBLISHED = "published"
    ARCHIVED = "archived"


class Document(Base):
    """Document model for knowledge base management."""
    
    __tablename__ = "documents"
    
    id = Column(Integer, primary_key=True, index=True)
    title = Column(String(255), nullable=False, index=True)
    description = Column(Text, nullable=True)
    filename = Column(String(255), nullable=False)
    file_path = Column(String(500), nullable=False)
    file_size = Column(Integer, nullable=False)
    file_type = Column(String(50), nullable=False)
    audience = Column(SQLEnum(DocumentAudience), default=DocumentAudience.BOTH, nullable=False)
    status = Column(SQLEnum(DocumentStatus), default=DocumentStatus.DRAFT, nullable=False)
    version = Column(String(20), default="1.0", nullable=False)
    tags = Column(Text, nullable=True)  # JSON string of tags
    meta_data = Column(Text, nullable=True)  # JSON string of additional metadata
    
    # Vector database reference
    vector_id = Column(String(255), nullable=True, index=True)
    
    # Audit fields
    uploaded_by = Column(Integer, ForeignKey("users.id"), nullable=False)
    created_at = Column(DateTime(timezone=True), default=lambda: datetime.now(timezone.utc), nullable=False)
    updated_at = Column(DateTime(timezone=True), default=lambda: datetime.now(timezone.utc), onupdate=lambda: datetime.now(timezone.utc), nullable=False)
    processed_at = Column(DateTime(timezone=True), nullable=True)
    is_processed = Column(Boolean, default=False, nullable=False)
    
    # Relationships
    uploader = relationship("User", backref="uploaded_documents")
    
    def __repr__(self):
        return f"<Document(id={self.id}, title='{self.title}', audience='{self.audience}')>"
    
    @property
    def is_published(self) -> bool:
        """Check if document is published."""
        return self.status == DocumentStatus.PUBLISHED
    
    @property
    def is_archived(self) -> bool:
        """Check if document is archived."""
        return self.status == DocumentStatus.ARCHIVED
    
    @property
    def is_for_customers(self) -> bool:
        """Check if document is accessible to customers."""
        return self.audience in [DocumentAudience.CUSTOMER, DocumentAudience.BOTH]
    
    @property
    def is_for_field_engineers(self) -> bool:
        """Check if document is accessible to field engineers."""
        return self.audience in [DocumentAudience.FIELD_ENGINEER, DocumentAudience.BOTH] 