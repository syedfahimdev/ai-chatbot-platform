"""
Admin endpoints for analytics, system management, and administrative functions.

Generated on: 2024-12-19T10:30:00Z
Generated by syed
"""

from datetime import datetime, timezone, timedelta
from typing import List, Dict, Any
from fastapi import APIRouter, Depends, HTTPException, status
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, func
from pydantic import BaseModel

from app.core.auth import get_current_admin_user
from app.core.database import get_db
from app.models.user import User
from app.models.conversation import Conversation, Message
from app.models.document import Document
from app.models.feedback import Feedback
from app.services.rag_service import rag_service
import structlog

logger = structlog.get_logger()
router = APIRouter()


class SystemStats(BaseModel):
    """System statistics response model."""
    total_users: int
    total_conversations: int
    total_messages: int
    total_documents: int
    total_feedback: int
    vector_documents: int
    active_conversations_today: int
    messages_today: int


class UserStats(BaseModel):
    """User statistics response model."""
    user_id: int
    username: str
    email: str
    role: str
    conversation_count: int
    message_count: int
    last_activity: datetime


@router.get("/stats", response_model=SystemStats)
async def get_system_stats(
    current_user: User = Depends(get_current_admin_user),
    db: AsyncSession = Depends(get_db)
):
    """Get system-wide statistics."""
    try:
        # Get basic counts
        user_count = await db.execute(select(func.count(User.id)))
        conversation_count = await db.execute(select(func.count(Conversation.id)))
        message_count = await db.execute(select(func.count(Message.id)))
        document_count = await db.execute(select(func.count(Document.id)))
        feedback_count = await db.execute(select(func.count(Feedback.id)))
        
        # Get today's activity
        today = datetime.now(timezone.utc).date()
        today_conversations = await db.execute(
            select(func.count(Conversation.id)).where(
                func.date(Conversation.created_at) == today
            )
        )
        today_messages = await db.execute(
            select(func.count(Message.id)).where(
                func.date(Message.created_at) == today
            )
        )
        
        # Get vector database stats
        vector_stats = await rag_service.get_document_stats()
        vector_documents = vector_stats.get("total_documents", 0)
        
        return SystemStats(
            total_users=user_count.scalar(),
            total_conversations=conversation_count.scalar(),
            total_messages=message_count.scalar(),
            total_documents=document_count.scalar(),
            total_feedback=feedback_count.scalar(),
            vector_documents=vector_documents,
            active_conversations_today=today_conversations.scalar(),
            messages_today=today_messages.scalar()
        )
        
    except Exception as e:
        logger.error(f"Error getting system stats: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Error retrieving system statistics"
        )


@router.get("/users/stats", response_model=List[UserStats])
async def get_user_stats(
    current_user: User = Depends(get_current_admin_user),
    db: AsyncSession = Depends(get_db)
):
    """Get user activity statistics."""
    try:
        # Get all users with their activity stats
        result = await db.execute(
            select(
                User.id,
                User.username,
                User.email,
                User.role,
                func.count(Conversation.id).label("conversation_count"),
                func.count(Message.id).label("message_count"),
                func.max(Message.created_at).label("last_activity")
            )
            .outerjoin(Conversation, User.id == Conversation.user_id)
            .outerjoin(Message, User.id == Message.conversation_id)
            .group_by(User.id)
            .order_by(func.count(Message.id).desc())
        )
        
        users_stats = []
        for row in result:
            users_stats.append(UserStats(
                user_id=row.id,
                username=row.username,
                email=row.email,
                role=row.role.value,
                conversation_count=row.conversation_count or 0,
                message_count=row.message_count or 0,
                last_activity=row.last_activity or row.created_at
            ))
        
        return users_stats
        
    except Exception as e:
        logger.error(f"Error getting user stats: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Error retrieving user statistics"
        )


@router.get("/documents/stats")
async def get_document_stats(
    current_user: User = Depends(get_current_admin_user),
    db: AsyncSession = Depends(get_db)
):
    """Get document statistics."""
    try:
        # Get document counts by status and audience
        status_counts = await db.execute(
            select(
                Document.status,
                func.count(Document.id)
            )
            .group_by(Document.status)
        )
        
        audience_counts = await db.execute(
            select(
                Document.audience,
                func.count(Document.id)
            )
            .group_by(Document.audience)
        )
        
        # Get processing stats
        processed_count = await db.execute(
            select(func.count(Document.id)).where(Document.is_processed == True)
        )
        
        unprocessed_count = await db.execute(
            select(func.count(Document.id)).where(Document.is_processed == False)
        )
        
        return {
            "by_status": {row.status.value: row.count for row in status_counts},
            "by_audience": {row.audience.value: row.count for row in audience_counts},
            "processed": processed_count.scalar(),
            "unprocessed": unprocessed_count.scalar(),
            "vector_stats": await rag_service.get_document_stats()
        }
        
    except Exception as e:
        logger.error(f"Error getting document stats: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Error retrieving document statistics"
        )


@router.get("/feedback/stats")
async def get_feedback_stats(
    current_user: User = Depends(get_current_admin_user),
    db: AsyncSession = Depends(get_db)
):
    """Get feedback statistics."""
    try:
        # Get feedback counts by type and rating
        type_counts = await db.execute(
            select(
                Feedback.feedback_type,
                func.count(Feedback.id)
            )
            .group_by(Feedback.feedback_type)
        )
        
        rating_counts = await db.execute(
            select(
                Feedback.rating,
                func.count(Feedback.id)
            )
            .where(Feedback.rating.isnot(None))
            .group_by(Feedback.rating)
        )
        
        # Get recent feedback
        recent_feedback = await db.execute(
            select(Feedback)
            .order_by(Feedback.created_at.desc())
            .limit(10)
        )
        
        return {
            "by_type": {row.feedback_type.value: row.count for row in type_counts},
            "by_rating": {row.rating.value: row.count for row in rating_counts if row.rating},
            "recent_feedback": [feedback for feedback in recent_feedback.scalars()]
        }
        
    except Exception as e:
        logger.error(f"Error getting feedback stats: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Error retrieving feedback statistics"
        )


@router.post("/system/health")
async def check_system_health(
    current_user: User = Depends(get_current_admin_user)
):
    """Check system health and connectivity."""
    try:
        health_status = {
            "database": "healthy",
            "vector_database": "healthy",
            "openai": "healthy",
            "timestamp": datetime.now(timezone.utc).isoformat()
        }
        
        # Check vector database
        try:
            vector_stats = await rag_service.get_document_stats()
            if "error" in vector_stats:
                health_status["vector_database"] = "unhealthy"
        except Exception:
            health_status["vector_database"] = "unhealthy"
        
        # Check OpenAI (simple test)
        try:
            test_response = await rag_service.get_response(
                question="test",
                user_role="admin"
            )
            if not test_response.get("answer"):
                health_status["openai"] = "unhealthy"
        except Exception:
            health_status["openai"] = "unhealthy"
        
        return health_status
        
    except Exception as e:
        logger.error(f"Error checking system health: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Error checking system health"
        ) 