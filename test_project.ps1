# AI Chatbot Project Test Script
# Generated by syed
# Generated on: 2024-12-30T03:22:00Z

Write-Host "`n==============================================================" -ForegroundColor Cyan
Write-Host "            AI CHATBOT PROJECT TEST SUITE" -ForegroundColor Cyan
Write-Host "                  Generated by syed" -ForegroundColor Cyan
Write-Host "==============================================================`n" -ForegroundColor Cyan

# Configuration
$BaseUrl = "http://localhost:8000"
$FrontendUrl = "http://localhost:3000"

# Test Results Storage
$TestResults = @{
    Passed = 0
    Failed = 0
    Warnings = 0
}

function Write-TestResult {
    param(
        [string]$TestName,
        [string]$Status,
        [string]$Details = ""
    )
    
    switch ($Status) {
        "PASS" { 
            Write-Host "[✓] $TestName" -ForegroundColor Green
            $script:TestResults.Passed++
        }
        "FAIL" { 
            Write-Host "[✗] $TestName" -ForegroundColor Red
            $script:TestResults.Failed++
        }
        "WARNING" { 
            Write-Host "[!] $TestName" -ForegroundColor Yellow
            $script:TestResults.Warnings++
        }
    }
    
    if ($Details) {
        Write-Host "    → $Details" -ForegroundColor Cyan
    }
}

function Test-ServiceHealth {
    param(
        [string]$ServiceName,
        [string]$Url
    )
    
    try {
        $response = Invoke-WebRequest -Uri $Url -Method Get -TimeoutSec 5 -ErrorAction Stop
        if ($response.StatusCode -eq 200) {
            return $true, "Service is running"
        } else {
            return $false, "Unexpected status code: $($response.StatusCode)"
        }
    } catch {
        if ($_.Exception.Message -like "*Unable to connect*") {
            return $false, "Connection refused - service not running"
        } else {
            return $false, $_.Exception.Message
        }
    }
}

# Test 1: Check Docker Environment
Write-Host "`n[Testing Docker Environment]" -ForegroundColor Yellow

# Check if Docker is running
try {
    $dockerVersion = docker --version 2>$null
    if ($dockerVersion) {
        Write-TestResult "Docker Installation" "PASS" $dockerVersion
        
        # Check if Docker daemon is running
        $dockerInfo = docker info 2>&1
        if ($LASTEXITCODE -eq 0) {
            Write-TestResult "Docker Daemon" "PASS" "Docker is running"
        } else {
            Write-TestResult "Docker Daemon" "FAIL" "Docker daemon is not running"
        }
    } else {
        Write-TestResult "Docker Installation" "FAIL" "Docker is not installed"
    }
} catch {
    Write-TestResult "Docker Installation" "FAIL" "Docker is not installed"
}

# Check project files
if (Test-Path "docker-compose.yml") {
    Write-TestResult "docker-compose.yml" "PASS" "Configuration file exists"
} else {
    Write-TestResult "docker-compose.yml" "FAIL" "Configuration file not found"
}

if (Test-Path ".env") {
    Write-TestResult ".env file" "PASS" "Environment file exists"
    
    # Check for OpenAI API key
    $envContent = Get-Content ".env" -Raw
    if ($envContent -match "OPENAI_API_KEY=your_openai_api_key_here") {
        Write-TestResult "OpenAI API Key" "WARNING" "Using default value - needs to be updated"
    } elseif ($envContent -match "OPENAI_API_KEY=") {
        Write-TestResult "OpenAI API Key" "PASS" "API key is configured"
    } else {
        Write-TestResult "OpenAI API Key" "FAIL" "API key not found in .env"
    }
} else {
    Write-TestResult ".env file" "FAIL" "Environment file not found"
}

# Test 2: Check Services Status
Write-Host "`n[Testing Services Status]" -ForegroundColor Yellow

# Check if containers are running
try {
    $containers = docker-compose ps --format json 2>$null | ConvertFrom-Json
    if ($containers) {
        Write-TestResult "Docker Containers" "PASS" "$($containers.Count) containers found"
        
        foreach ($container in $containers) {
            $status = if ($container.State -eq "running") { "PASS" } else { "FAIL" }
            Write-TestResult "Container: $($container.Service)" $status "State: $($container.State)"
        }
    } else {
        Write-TestResult "Docker Containers" "WARNING" "No containers found - services may not be running"
    }
} catch {
    Write-TestResult "Docker Containers" "WARNING" "Could not check container status"
}

# Test 3: Backend Health
Write-Host "`n[Testing Backend API]" -ForegroundColor Yellow

$backendOk, $backendDetails = Test-ServiceHealth "Backend API" "$BaseUrl/health"
Write-TestResult "Backend Health" $(if ($backendOk) { "PASS" } else { "FAIL" }) $backendDetails

if ($backendOk) {
    # Test API Documentation
    try {
        $docsResponse = Invoke-WebRequest -Uri "$BaseUrl/docs" -Method Get -TimeoutSec 5 -ErrorAction Stop
        Write-TestResult "API Documentation" "PASS" "Swagger UI is accessible"
    } catch {
        Write-TestResult "API Documentation" "FAIL" "Cannot access API documentation"
    }
    
    # Test Authentication
    Write-Host "`n[Testing Authentication]" -ForegroundColor Yellow
    
    $testAccounts = @{
        "Admin" = @{
            username = "admin@demo.com"
            password = "admin123"
        }
        "Customer" = @{
            username = "customer@demo.com"
            password = "test123"
        }
        "Engineer" = @{
            username = "engineer@demo.com"
            password = "test123"
        }
    }
    
    foreach ($role in $testAccounts.Keys) {
        try {
            $loginBody = @{
                username = $testAccounts[$role].username
                password = $testAccounts[$role].password
            }
            
            $response = Invoke-RestMethod -Uri "$BaseUrl/api/v1/auth/login" `
                -Method Post `
                -Body $loginBody `
                -ContentType "application/x-www-form-urlencoded" `
                -ErrorAction Stop
            
            if ($response.access_token) {
                Write-TestResult "$role Login" "PASS" "Successfully authenticated"
            } else {
                Write-TestResult "$role Login" "FAIL" "No access token received"
            }
        } catch {
            Write-TestResult "$role Login" "FAIL" $_.Exception.Message
        }
    }
}

# Test 4: Frontend
Write-Host "`n[Testing Frontend]" -ForegroundColor Yellow

$frontendOk, $frontendDetails = Test-ServiceHealth "Frontend" $FrontendUrl
Write-TestResult "Frontend Accessibility" $(if ($frontendOk) { "PASS" } else { "FAIL" }) $frontendDetails

# Test Summary
Write-Host "`n==============================================================" -ForegroundColor Cyan
Write-Host "                    TEST SUMMARY" -ForegroundColor Cyan
Write-Host "==============================================================" -ForegroundColor Cyan

Write-Host "`nTest Results:" -ForegroundColor White
Write-Host "  Passed:   $($TestResults.Passed)" -ForegroundColor Green
Write-Host "  Failed:   $($TestResults.Failed)" -ForegroundColor Red
Write-Host "  Warnings: $($TestResults.Warnings)" -ForegroundColor Yellow

Write-Host "`nNext Steps:" -ForegroundColor White

if ($TestResults.Failed -gt 0 -or -not $backendOk) {
    Write-Host "`n1. Start the services:" -ForegroundColor Yellow
    Write-Host "   docker-compose up -d --build" -ForegroundColor Cyan
    
    Write-Host "`n2. Check container logs if services fail:" -ForegroundColor Yellow
    Write-Host "   docker-compose logs [service_name]" -ForegroundColor Cyan
    
    Write-Host "`n3. Ensure your .env file has valid values, especially:" -ForegroundColor Yellow
    Write-Host "   - OPENAI_API_KEY (for AI chat functionality)" -ForegroundColor Cyan
}

Write-Host "`nFor Production Deployment:" -ForegroundColor Yellow
Write-Host "  - Frontend: Deploy to Netlify (netlify.toml is configured)" -ForegroundColor Cyan
Write-Host "  - Backend: Consider Railway, Render, or AWS" -ForegroundColor Cyan

Write-Host "`n==============================================================`n" -ForegroundColor Cyan