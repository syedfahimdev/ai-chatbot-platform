/**
 * API service layer for communicating with the backend
 * 
 * Generated on: 2024-12-19T10:30:00Z
 * Generated by syed
 */

import axios, { AxiosInstance, AxiosResponse } from 'axios';
import { LoginCredentials, RegisterData, User } from '../contexts/AuthContext';

// API base configuration
const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';

// Create axios instance
const api: AxiosInstance = axios.create({
  baseURL: `${API_BASE_URL}/api/v1`,
  headers: {
    'Content-Type': 'application/json',
  },
});

// Request interceptor to add auth token
api.interceptors.request.use(
  (config) => {
    const token = localStorage.getItem('token');
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }
    return config;
  },
  (error) => {
    return Promise.reject(error);
  }
);

// Response interceptor to handle auth errors
api.interceptors.response.use(
  (response) => response,
  (error) => {
    if (error.response?.status === 401) {
      localStorage.removeItem('token');
      window.location.href = '/login';
    }
    return Promise.reject(error);
  }
);

// Types
export interface ChatMessage {
  content: string;
  conversation_id?: number;
  conversation_type: 'customer_support' | 'field_service';
}

export interface ChatResponse {
  message_id: number;
  content: string;
  role: string;
  conversation_id: number;
  sources: any[];
  confidence_score: number;
  model_used: string;
  timestamp: string;
}

export interface Conversation {
  id: number;
  title?: string;
  conversation_type: 'customer_support' | 'field_service';
  message_count: number;
  created_at: string;
  updated_at: string;
}

export interface Message {
  id: number;
  content: string;
  role: string;
  conversation_id: number;
  sources?: any[];
  confidence_score?: number;
  model_used?: string;
  created_at: string;
}

export interface Document {
  id: number;
  title: string;
  description?: string;
  filename: string;
  file_size: number;
  file_type: string;
  audience: 'customer' | 'field_engineer' | 'both';
  status: 'draft' | 'published' | 'archived';
  version: string;
  tags?: string;
  is_processed: boolean;
  created_at: string;
  updated_at: string;
}

// Auth API
export const authApi = {
  login: (credentials: LoginCredentials): Promise<AxiosResponse> => {
    const formData = new FormData();
    formData.append('username', credentials.username);
    formData.append('password', credentials.password);
    
    return api.post('/auth/login', formData, {
      headers: {
        'Content-Type': 'multipart/form-data',
      },
    });
  },

  register: (data: RegisterData): Promise<AxiosResponse> => {
    return api.post('/auth/register', data);
  },

  getProfile: (): Promise<AxiosResponse<User>> => {
    return api.get('/auth/me');
  },

  updateProfile: (data: Partial<User>): Promise<AxiosResponse<User>> => {
    return api.put('/users/profile', data);
  },

  refreshToken: (): Promise<AxiosResponse> => {
    return api.post('/auth/refresh');
  },
};

// Chat API
export const chatApi = {
  sendMessage: (message: ChatMessage): Promise<AxiosResponse<ChatResponse>> => {
    return api.post('/chat/send', message);
  },

  getConversations: (): Promise<AxiosResponse<Conversation[]>> => {
    return api.get('/chat/conversations');
  },

  getConversationMessages: (conversationId: number): Promise<AxiosResponse<Message[]>> => {
    return api.get(`/chat/conversations/${conversationId}/messages`);
  },

  deleteConversation: (conversationId: number): Promise<AxiosResponse> => {
    return api.delete(`/chat/conversations/${conversationId}`);
  },

  getConversation: (conversationId: number): Promise<AxiosResponse<Conversation>> => {
    return api.get(`/chat/conversations/${conversationId}`);
  },
};

// Documents API
export const documentsApi = {
  uploadDocument: (formData: FormData): Promise<AxiosResponse<Document>> => {
    return api.post('/documents/upload', formData, {
      headers: {
        'Content-Type': 'multipart/form-data',
      },
    });
  },

  getDocuments: (params?: {
    audience?: string;
    status?: string;
  }): Promise<AxiosResponse<Document[]>> => {
    return api.get('/documents', { params });
  },

  getDocument: (documentId: number): Promise<AxiosResponse<Document>> => {
    return api.get(`/documents/${documentId}`);
  },

  updateDocument: (
    documentId: number,
    data: Partial<Document>
  ): Promise<AxiosResponse<Document>> => {
    return api.put(`/documents/${documentId}`, data);
  },

  deleteDocument: (documentId: number): Promise<AxiosResponse> => {
    return api.delete(`/documents/${documentId}`);
  },

  reprocessDocument: (documentId: number): Promise<AxiosResponse> => {
    return api.post(`/documents/${documentId}/process`);
  },
};

// Users API
export const usersApi = {
  getUsers: (): Promise<AxiosResponse<User[]>> => {
    return api.get('/users');
  },

  getUser: (userId: number): Promise<AxiosResponse<User>> => {
    return api.get(`/users/${userId}`);
  },

  updateUserRole: (userId: number, role: string): Promise<AxiosResponse> => {
    return api.put(`/users/${userId}/role`, { role });
  },

  updateUserStatus: (userId: number, isActive: boolean): Promise<AxiosResponse> => {
    return api.put(`/users/${userId}/status`, { is_active: isActive });
  },
};

// Admin API
export const adminApi = {
  getSystemStats: (): Promise<AxiosResponse> => {
    return api.get('/admin/stats');
  },

  getUserStats: (): Promise<AxiosResponse> => {
    return api.get('/admin/users/stats');
  },

  getDocumentStats: (): Promise<AxiosResponse> => {
    return api.get('/admin/documents/stats');
  },

  getFeedbackStats: (): Promise<AxiosResponse> => {
    return api.get('/admin/feedback/stats');
  },

  checkSystemHealth: (): Promise<AxiosResponse> => {
    return api.post('/admin/system/health');
  },
};

export default api; 