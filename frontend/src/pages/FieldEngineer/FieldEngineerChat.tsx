/**
 * Field Engineer Chat component with advanced features for technical guidance
 * 
 * Generated on: 2024-12-19T10:30:00Z
 * Generated by syed
 */

import React, { useState, useEffect, useRef } from 'react';
import {
  Box,
  Paper,
  TextField,
  Button,
  Typography,
  Avatar,
  List,
  ListItem,
  ListItemText,
  Chip,
  Divider,
  CircularProgress,
  Alert,
  IconButton,
  Tooltip,
  Accordion,
  AccordionSummary,
  AccordionDetails,
  Grid,
} from '@mui/material';
import {
  Send as SendIcon,
  Refresh as RefreshIcon,
  Chat as ChatIcon,
  Person as PersonIcon,
  SmartToy as BotIcon,
  ExpandMore as ExpandMoreIcon,
  Engineering as EngineeringIcon,
  Code as CodeIcon,
  Build as BuildIcon,
} from '@mui/icons-material';
import { useQuery, useMutation, useQueryClient } from 'react-query';
import { chatApi, ChatMessage, ChatResponse, Conversation, Message } from '../../services/api.ts';
import toast from 'react-hot-toast';

const FieldEngineerChat: React.FC = () => {
  const [message, setMessage] = useState('');
  const [currentConversationId, setCurrentConversationId] = useState<number | null>(null);
  const [messages, setMessages] = useState<Message[]>([]);
  const [showTechnicalDetails, setShowTechnicalDetails] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const queryClient = useQueryClient();

  // Get conversations
  const { data: conversations, isLoading: conversationsLoading } = useQuery(
    'field-conversations',
    () => chatApi.getConversations(),
    {
      refetchOnWindowFocus: false,
    }
  );

  // Get messages for current conversation
  const { data: conversationMessages, isLoading: messagesLoading } = useQuery(
    ['field-messages', currentConversationId],
    () => chatApi.getConversationMessages(currentConversationId!),
    {
      enabled: !!currentConversationId,
      refetchOnWindowFocus: false,
    }
  );

  // Send message mutation
  const sendMessageMutation = useMutation(
    (messageData: ChatMessage) => chatApi.sendMessage(messageData),
    {
      onSuccess: (response) => {
        const newMessage: Message = {
          id: response.data.message_id,
          content: response.data.content,
          role: response.data.role,
          conversation_id: response.data.conversation_id,
          sources: response.data.sources,
          confidence_score: response.data.confidence_score,
          model_used: response.data.model_used,
          created_at: response.data.timestamp,
        };

        setMessages(prev => [...prev, newMessage]);
        setCurrentConversationId(response.data.conversation_id);
        setMessage('');
        
        queryClient.invalidateQueries('field-conversations');
        toast.success('Message sent successfully!');
      },
      onError: (error: any) => {
        toast.error(error.response?.data?.detail || 'Failed to send message');
      },
    }
  );

  useEffect(() => {
    if (conversationMessages?.data) {
      setMessages(conversationMessages.data);
    }
  }, [conversationMessages]);

  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages]);

  const handleSendMessage = () => {
    if (!message.trim()) return;

    const messageData: ChatMessage = {
      content: message.trim(),
      conversation_id: currentConversationId || undefined,
      conversation_type: 'field_service',
    };

    sendMessageMutation.mutate(messageData);
  };

  const handleKeyPress = (event: React.KeyboardEvent) => {
    if (event.key === 'Enter' && !event.shiftKey) {
      event.preventDefault();
      handleSendMessage();
    }
  };

  const handleNewConversation = () => {
    setCurrentConversationId(null);
    setMessages([]);
  };

  const handleSelectConversation = (conversation: Conversation) => {
    setCurrentConversationId(conversation.id);
  };

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleString();
  };

  const getConfidenceColor = (score: number) => {
    if (score >= 80) return 'success';
    if (score >= 60) return 'warning';
    return 'error';
  };

  const quickPrompts = [
    "How do I troubleshoot network connectivity issues?",
    "What are the safety procedures for equipment maintenance?",
    "How do I calibrate the system sensors?",
    "What tools are required for this repair?",
    "How do I access the diagnostic logs?",
  ];

  const handleQuickPrompt = (prompt: string) => {
    setMessage(prompt);
  };

  return (
    <Box sx={{ display: 'flex', height: 'calc(100vh - 120px)', gap: 2 }}>
      {/* Conversations Sidebar */}
      <Paper sx={{ width: 300, p: 2, display: 'flex', flexDirection: 'column' }}>
        <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
          <EngineeringIcon sx={{ mr: 1 }} />
          <Typography variant="h6">Field Service</Typography>
        </Box>
        
        <Button
          variant="contained"
          fullWidth
          onClick={handleNewConversation}
          sx={{ mb: 2 }}
        >
          New Technical Session
        </Button>

        {/* Quick Prompts */}
        <Accordion sx={{ mb: 2 }}>
          <AccordionSummary expandIcon={<ExpandMoreIcon />}>
            <Typography variant="subtitle2">Quick Prompts</Typography>
          </AccordionSummary>
          <AccordionDetails>
            <Grid container spacing={1}>
              {quickPrompts.map((prompt, index) => (
                <Grid item xs={12} key={index}>
                  <Button
                    variant="outlined"
                    size="small"
                    fullWidth
                    onClick={() => handleQuickPrompt(prompt)}
                    sx={{ textAlign: 'left', justifyContent: 'flex-start' }}
                  >
                    {prompt}
                  </Button>
                </Grid>
              ))}
            </Grid>
          </AccordionDetails>
        </Accordion>

        {conversationsLoading ? (
          <CircularProgress />
        ) : (
          <List sx={{ flexGrow: 1, overflow: 'auto' }}>
            {conversations?.data?.map((conversation) => (
              <ListItem
                key={conversation.id}
                button
                selected={currentConversationId === conversation.id}
                onClick={() => handleSelectConversation(conversation)}
              >
                <ListItemText
                  primary={conversation.title || 'Technical session'}
                  secondary={`${conversation.message_count} messages`}
                />
              </ListItem>
            ))}
          </List>
        )}
      </Paper>

      {/* Chat Area */}
      <Paper sx={{ flexGrow: 1, display: 'flex', flexDirection: 'column' }}>
        {/* Chat Header */}
        <Box sx={{ p: 2, borderBottom: 1, borderColor: 'divider' }}>
          <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>
            <Typography variant="h6">
              Field Service Technical Support
              {currentConversationId && (
                <Chip
                  label="Active"
                  color="success"
                  size="small"
                  sx={{ ml: 2 }}
                />
              )}
            </Typography>
            <Button
              size="small"
              onClick={() => setShowTechnicalDetails(!showTechnicalDetails)}
              startIcon={<CodeIcon />}
            >
              {showTechnicalDetails ? 'Hide' : 'Show'} Technical Details
            </Button>
          </Box>
        </Box>

        {/* Messages Area */}
        <Box sx={{ flexGrow: 1, overflow: 'auto', p: 2 }}>
          {messagesLoading ? (
            <Box sx={{ display: 'flex', justifyContent: 'center', p: 2 }}>
              <CircularProgress />
            </Box>
          ) : messages.length === 0 ? (
            <Box sx={{ textAlign: 'center', p: 4 }}>
              <EngineeringIcon sx={{ fontSize: 64, color: 'text.secondary', mb: 2 }} />
              <Typography variant="h6" color="text.secondary" gutterBottom>
                Field Service Technical Support
              </Typography>
              <Typography variant="body2" color="text.secondary" gutterBottom>
                Get technical guidance and troubleshooting assistance.
              </Typography>
              <Typography variant="body2" color="text.secondary">
                Use quick prompts or start a new conversation.
              </Typography>
            </Box>
          ) : (
            <List>
              {messages.map((msg, index) => (
                <React.Fragment key={msg.id}>
                  <ListItem
                    sx={{
                      flexDirection: 'column',
                      alignItems: msg.role === 'user' ? 'flex-end' : 'flex-start',
                    }}
                  >
                    <Box
                      sx={{
                        display: 'flex',
                        alignItems: 'flex-start',
                        maxWidth: '70%',
                        flexDirection: msg.role === 'user' ? 'row-reverse' : 'row',
                      }}
                    >
                      <Avatar
                        sx={{
                          bgcolor: msg.role === 'user' ? 'primary.main' : 'secondary.main',
                          mr: msg.role === 'user' ? 0 : 1,
                          ml: msg.role === 'user' ? 1 : 0,
                        }}
                      >
                        {msg.role === 'user' ? <PersonIcon /> : <BotIcon />}
                      </Avatar>
                      <Paper
                        sx={{
                          p: 2,
                          bgcolor: msg.role === 'user' ? 'primary.light' : 'grey.100',
                          color: msg.role === 'user' ? 'white' : 'text.primary',
                        }}
                      >
                        <Typography variant="body1" sx={{ whiteSpace: 'pre-wrap' }}>
                          {msg.content}
                        </Typography>
                        
                        {/* Technical Details */}
                        {showTechnicalDetails && msg.role === 'assistant' && (
                          <Box sx={{ mt: 2, pt: 2, borderTop: 1, borderColor: 'divider' }}>
                            <Typography variant="caption" color="text.secondary" display="block">
                              Technical Information:
                            </Typography>
                            
                            {/* Sources */}
                            {msg.sources && msg.sources.length > 0 && (
                              <Box sx={{ mt: 1 }}>
                                <Typography variant="caption" color="text.secondary">
                                  Sources:
                                </Typography>
                                {msg.sources.map((source: any, idx: number) => (
                                  <Chip
                                    key={idx}
                                    label={source.title}
                                    size="small"
                                    sx={{ mr: 0.5, mt: 0.5 }}
                                  />
                                ))}
                              </Box>
                            )}
                            
                            {/* Confidence Score */}
                            {msg.confidence_score && (
                              <Box sx={{ mt: 1 }}>
                                <Chip
                                  label={`Confidence: ${msg.confidence_score}%`}
                                  color={getConfidenceColor(msg.confidence_score) as any}
                                  size="small"
                                />
                              </Box>
                            )}
                            
                            {/* Model Used */}
                            {msg.model_used && (
                              <Typography variant="caption" color="text.secondary" display="block">
                                Model: {msg.model_used}
                              </Typography>
                            )}
                          </Box>
                        )}
                        
                        <Typography variant="caption" sx={{ display: 'block', mt: 1 }}>
                          {formatDate(msg.created_at)}
                        </Typography>
                      </Paper>
                    </Box>
                  </ListItem>
                  {index < messages.length - 1 && <Divider />}
                </React.Fragment>
              ))}
              <div ref={messagesEndRef} />
            </List>
          )}
        </Box>

        {/* Message Input */}
        <Box sx={{ p: 2, borderTop: 1, borderColor: 'divider' }}>
          <Box sx={{ display: 'flex', gap: 1 }}>
            <TextField
              fullWidth
              multiline
              maxRows={4}
              value={message}
              onChange={(e) => setMessage(e.target.value)}
              onKeyPress={handleKeyPress}
              placeholder="Ask technical questions or describe the issue..."
              disabled={sendMessageMutation.isLoading}
            />
            <Button
              variant="contained"
              onClick={handleSendMessage}
              disabled={!message.trim() || sendMessageMutation.isLoading}
              sx={{ minWidth: 56 }}
            >
              {sendMessageMutation.isLoading ? (
                <CircularProgress size={20} />
              ) : (
                <SendIcon />
              )}
            </Button>
          </Box>
        </Box>
      </Paper>
    </Box>
  );
};

export default FieldEngineerChat; 